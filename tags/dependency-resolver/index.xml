<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dependency resolver on Pradyun Gedam</title><link>https://pradyunsg.me/tags/dependency-resolver/</link><description>Recent content in dependency resolver on Pradyun Gedam</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 27 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://pradyunsg.me/tags/dependency-resolver/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing the next-gen pip dependency resolver</title><link>https://pradyunsg.me/blog/2020/03/27/pip-resolver-testing/</link><pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate><guid>https://pradyunsg.me/blog/2020/03/27/pip-resolver-testing/</guid><description>This is an attempt to summarize the broader software architecture around dependency resolution in pip and how testing is being done around this area.
The motivation behind writing this, is to make sure all the developers working on this project are on the same page, and to have a written record about the state of affairs.
Architecture The &amp;ldquo;legacy&amp;rdquo; resolver in pip, is implemented as part of pip&amp;rsquo;s codebase and has been a part of it for many years.</description></item></channel></rss>